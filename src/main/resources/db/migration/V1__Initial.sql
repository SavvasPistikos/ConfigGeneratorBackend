CREATE TABLE `swagger` (
  ID int(11) NOT NULL AUTO_INCREMENT,
  CONTENT longtext NOT NULL,
  SERVICE varchar(255) NOT NULL,
  SWAGGER_URL varchar(255) DEFAULT NULL,
  VERSION varchar(255) DEFAULT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE `int_paths` (
  ID int(11) NOT NULL AUTO_INCREMENT,
  AUTH bit(1) DEFAULT NULL,
  DISP bit(1) DEFAULT NULL,
  ENDPOINT varchar(255) NOT NULL,
  METHOD varchar(255) NOT NULL,
  HEADERS varchar(255) DEFAULT NULL,
  QUERY_PARAMS varchar(255) DEFAULT NULL,
  TRNS_TYPE_ID int(11) DEFAULT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE `configuration` (
  ID int(11) NOT NULL AUTO_INCREMENT,
  APIS_YAML varchar(255) DEFAULT NULL,
  UPDATE_DT datetime DEFAULT NULL,
  PRIMARY KEY (ID)
);


INSERT INTO swaggers.swagger
(CONTENT, SERVICE, SWAGGER_URL, VERSION)
VALUES('{"swagger":"2.0","info":{"description":"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.","version":"1.0.0","title":"Swagger Petstore","termsOfService":"http://swagger.io/terms/","contact":{"email":"apiteam@swagger.io"},"license":{"name":"Apache 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.html"}},"host":"petstore.swagger.io","basePath":"/v2","tags":[{"name":"pet","description":"Everything about your Pets","externalDocs":{"description":"Find out more","url":"http://swagger.io"}},{"name":"store","description":"Access to Petstore orders"},{"name":"user","description":"Operations about user","externalDocs":{"description":"Find out more about our store","url":"http://swagger.io"}}],"schemes":["https","http"],"paths":{"/pet":{"post":{"tags":["pet"],"summary":"Add a new pet to the store","description":"","operationId":"addPet","consumes":["application/json","application/xml"],"produces":["application/xml","application/json"],"parameters":[{"in":"body","name":"body","description":"Pet object that needs to be added to the store","required":true,"schema":{"$ref":"#/definitions/Pet"}}],"responses":{"405":{"description":"Invalid input"}},"security":[{"petstore_auth":["write:pets","read:pets"]}]},"put":{"tags":["pet"],"summary":"Update an existing pet","description":"","operationId":"updatePet","consumes":["application/json","application/xml"],"produces":["application/xml","application/json"],"parameters":[{"in":"body","name":"body","description":"Pet object that needs to be added to the store","required":true,"schema":{"$ref":"#/definitions/Pet"}}],"responses":{"400":{"description":"Invalid ID supplied"},"404":{"description":"Pet not found"},"405":{"description":"Validation exception"}},"security":[{"petstore_auth":["write:pets","read:pets"]}]}},"/pet/findByStatus":{"get":{"tags":["pet"],"summary":"Finds Pets by status","description":"Multiple status values can be provided with comma separated strings","operationId":"findPetsByStatus","produces":["application/xml","application/json"],"parameters":[{"name":"status","in":"query","description":"Status values that need to be considered for filter","required":true,"type":"array","items":{"type":"string","enum":["available","pending","sold"],"default":"available"},"collectionFormat":"multi"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/Pet"}}},"400":{"description":"Invalid status value"}},"security":[{"petstore_auth":["write:pets","read:pets"]}]}},"/pet/findByTags":{"get":{"tags":["pet"],"summary":"Finds Pets by tags","description":"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.","operationId":"findPetsByTags","produces":["application/xml","application/json"],"parameters":[{"name":"tags","in":"query","description":"Tags to filter by","required":true,"type":"array","items":{"type":"string"},"collectionFormat":"multi"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/Pet"}}},"400":{"description":"Invalid tag value"}},"security":[{"petstore_auth":["write:pets","read:pets"]}],"deprecated":true}},"/pet/{petId}":{"get":{"tags":["pet"],"summary":"Find pet by ID","description":"Returns a single pet","operationId":"getPetById","produces":["application/xml","application/json"],"parameters":[{"name":"petId","in":"path","description":"ID of pet to return","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/Pet"}},"400":{"description":"Invalid ID supplied"},"404":{"description":"Pet not found"}},"security":[{"api_key":[]}]},"post":{"tags":["pet"],"summary":"Updates a pet in the store with form data","description":"","operationId":"updatePetWithForm","consumes":["application/x-www-form-urlencoded"],"produces":["application/xml","application/json"],"parameters":[{"name":"petId","in":"path","description":"ID of pet that needs to be updated","required":true,"type":"integer","format":"int64"},{"name":"name","in":"formData","description":"Updated name of the pet","required":false,"type":"string"},{"name":"status","in":"formData","description":"Updated status of the pet","required":false,"type":"string"}],"responses":{"405":{"description":"Invalid input"}},"security":[{"petstore_auth":["write:pets","read:pets"]}]},"delete":{"tags":["pet"],"summary":"Deletes a pet","description":"","operationId":"deletePet","produces":["application/xml","application/json"],"parameters":[{"name":"api_key","in":"header","required":false,"type":"string"},{"name":"petId","in":"path","description":"Pet id to delete","required":true,"type":"integer","format":"int64"}],"responses":{"400":{"description":"Invalid ID supplied"},"404":{"description":"Pet not found"}},"security":[{"petstore_auth":["write:pets","read:pets"]}]}},"/pet/{petId}/uploadImage":{"post":{"tags":["pet"],"summary":"uploads an image","description":"","operationId":"uploadFile","consumes":["multipart/form-data"],"produces":["application/json"],"parameters":[{"name":"petId","in":"path","description":"ID of pet to update","required":true,"type":"integer","format":"int64"},{"name":"additionalMetadata","in":"formData","description":"Additional data to pass to server","required":false,"type":"string"},{"name":"file","in":"formData","description":"file to upload","required":false,"type":"file"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/ApiResponse"}}},"security":[{"petstore_auth":["write:pets","read:pets"]}]}},"/store/inventory":{"get":{"tags":["store"],"summary":"Returns pet inventories by status","description":"Returns a map of status codes to quantities","operationId":"getInventory","produces":["application/json"],"parameters":[],"responses":{"200":{"description":"successful operation","schema":{"type":"object","additionalProperties":{"type":"integer","format":"int32"}}}},"security":[{"api_key":[]}]}},"/store/order":{"post":{"tags":["store"],"summary":"Place an order for a pet","description":"","operationId":"placeOrder","produces":["application/xml","application/json"],"parameters":[{"in":"body","name":"body","description":"order placed for purchasing the pet","required":true,"schema":{"$ref":"#/definitions/Order"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/Order"}},"400":{"description":"Invalid Order"}}}},"/store/order/{orderId}":{"get":{"tags":["store"],"summary":"Find purchase order by ID","description":"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions","operationId":"getOrderById","produces":["application/xml","application/json"],"parameters":[{"name":"orderId","in":"path","description":"ID of pet that needs to be fetched","required":true,"type":"integer","maximum":10.0,"minimum":1.0,"format":"int64"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/Order"}},"400":{"description":"Invalid ID supplied"},"404":{"description":"Order not found"}}},"delete":{"tags":["store"],"summary":"Delete purchase order by ID","description":"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors","operationId":"deleteOrder","produces":["application/xml","application/json"],"parameters":[{"name":"orderId","in":"path","description":"ID of the order that needs to be deleted","required":true,"type":"integer","minimum":1.0,"format":"int64"}],"responses":{"400":{"description":"Invalid ID supplied"},"404":{"description":"Order not found"}}}},"/user":{"post":{"tags":["user"],"summary":"Create user","description":"This can only be done by the logged in user.","operationId":"createUser","produces":["application/xml","application/json"],"parameters":[{"in":"body","name":"body","description":"Created user object","required":true,"schema":{"$ref":"#/definitions/User"}}],"responses":{"default":{"description":"successful operation"}}}},"/user/createWithArray":{"post":{"tags":["user"],"summary":"Creates list of users with given input array","description":"","operationId":"createUsersWithArrayInput","produces":["application/xml","application/json"],"parameters":[{"in":"body","name":"body","description":"List of user object","required":true,"schema":{"type":"array","items":{"$ref":"#/definitions/User"}}}],"responses":{"default":{"description":"successful operation"}}}},"/user/createWithList":{"post":{"tags":["user"],"summary":"Creates list of users with given input array","description":"","operationId":"createUsersWithListInput","produces":["application/xml","application/json"],"parameters":[{"in":"body","name":"body","description":"List of user object","required":true,"schema":{"type":"array","items":{"$ref":"#/definitions/User"}}}],"responses":{"default":{"description":"successful operation"}}}},"/user/login":{"get":{"tags":["user"],"summary":"Logs user into the system","description":"","operationId":"loginUser","produces":["application/xml","application/json"],"parameters":[{"name":"username","in":"query","description":"The user name for login","required":true,"type":"string"},{"name":"password","in":"query","description":"The password for login in clear text","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"type":"string"},"headers":{"X-Rate-Limit":{"type":"integer","format":"int32","description":"calls per hour allowed by the user"},"X-Expires-After":{"type":"string","format":"date-time","description":"date in UTC when token expires"}}},"400":{"description":"Invalid username/password supplied"}}}},"/user/logout":{"get":{"tags":["user"],"summary":"Logs out current logged in user session","description":"","operationId":"logoutUser","produces":["application/xml","application/json"],"parameters":[],"responses":{"default":{"description":"successful operation"}}}},"/user/{username}":{"get":{"tags":["user"],"summary":"Get user by user name","description":"","operationId":"getUserByName","produces":["application/xml","application/json"],"parameters":[{"name":"username","in":"path","description":"The name that needs to be fetched. Use user1 for testing. ","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/User"}},"400":{"description":"Invalid username supplied"},"404":{"description":"User not found"}}},"put":{"tags":["user"],"summary":"Updated user","description":"This can only be done by the logged in user.","operationId":"updateUser","produces":["application/xml","application/json"],"parameters":[{"name":"username","in":"path","description":"name that need to be updated","required":true,"type":"string"},{"in":"body","name":"body","description":"Updated user object","required":true,"schema":{"$ref":"#/definitions/User"}}],"responses":{"400":{"description":"Invalid user supplied"},"404":{"description":"User not found"}}},"delete":{"tags":["user"],"summary":"Delete user","description":"This can only be done by the logged in user.","operationId":"deleteUser","produces":["application/xml","application/json"],"parameters":[{"name":"username","in":"path","description":"The name that needs to be deleted","required":true,"type":"string"}],"responses":{"400":{"description":"Invalid username supplied"},"404":{"description":"User not found"}}}}},"securityDefinitions":{"petstore_auth":{"type":"oauth2","authorizationUrl":"https://petstore.swagger.io/oauth/authorize","flow":"implicit","scopes":{"write:pets":"modify pets in your account","read:pets":"read your pets"}},"api_key":{"type":"apiKey","name":"api_key","in":"header"}},"definitions":{"Order":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"petId":{"type":"integer","format":"int64"},"quantity":{"type":"integer","format":"int32"},"shipDate":{"type":"string","format":"date-time"},"status":{"type":"string","description":"Order Status","enum":["placed","approved","delivered"]},"complete":{"type":"boolean","default":false}},"xml":{"name":"Order"}},"User":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"username":{"type":"string"},"firstName":{"type":"string"},"lastName":{"type":"string"},"email":{"type":"string"},"password":{"type":"string"},"phone":{"type":"string"},"userStatus":{"type":"integer","format":"int32","description":"User Status"}},"xml":{"name":"User"}},"Category":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"name":{"type":"string"}},"xml":{"name":"Category"}},"Tag":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"name":{"type":"string"}},"xml":{"name":"Tag"}},"Pet":{"type":"object","required":["name","photoUrls"],"properties":{"id":{"type":"integer","format":"int64"},"category":{"$ref":"#/definitions/Category"},"name":{"type":"string","example":"doggie"},"photoUrls":{"type":"array","xml":{"name":"photoUrl","wrapped":true},"items":{"type":"string"}},"tags":{"type":"array","xml":{"name":"tag","wrapped":true},"items":{"$ref":"#/definitions/Tag"}},"status":{"type":"string","description":"pet status in the store","enum":["available","pending","sold"]}},"xml":{"name":"Pet"}},"ApiResponse":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"type":{"type":"string"},"message":{"type":"string"}}}},"externalDocs":{"description":"Find out more about Swagger","url":"http://swagger.io"}}', 'petstore', '', 'v1.0');
INSERT INTO swaggers.swagger
(CONTENT, SERVICE, SWAGGER_URL, VERSION)
VALUES('{   "basePath": "/",   "consumes": ["application/json"],   "host": "",   "info": {     "description": "RnG",     "title": "Random Number Generator Service",     "version": "1.0"   },   "paths": {     "/api/v1.0/min/{min}/max/{max}/size/{size}": {       "get": {         "description": "",         "operationId": "get_/api/v1.0/min/<>/max/<>/size/<>",         "parameters": [{           "description": "",           "format": "uint32",           "in": "path",           "name": "min",           "required": true,           "type": "integer"         },           {             "description": "",             "format": "uint32",             "in": "path",             "name": "max",             "required": true,             "type": "integer"           },           {             "description": "",             "format": "uint32",             "in": "path",             "name": "size",             "required": true,             "type": "integer"           }],         "responses": {           "200": {             "description": "OK",             "schema": {               "items": {                 "format": "uint32",                 "type": "integer"               },               "type": "array"             }           },           "400": {             "description": "Bad Request",             "schema": {               "type": "string"             }           },           "500": {             "description": "Internal Server Error",             "schema": {               "properties": {                 "code": {                   "description": "code",                   "format": "int32",                   "type": "integer"                 },                 "guid": {                   "description": "guid",                   "type": "string"                 },                 "message": {                   "description": "message",                   "type": "string"                 },                 "source": {                   "description": "source",                   "type": "string"                 },                 "type": {                   "description": "type",                   "type": "string"                 }               },               "required": ["code",                 "message",                 "guid",                 "source"],               "type": "object"             }           }         },         "summary": "Get non unique random numbers in a range",         "tags": ["rng"]       }     },     "/api/v1.0/min/{min}/max/{max}/size/{size}/unique": {       "get": {         "description": "",         "operationId": "get_/api/v1.0/min/<>/max/<>/size/<>/unique",         "parameters": [{           "description": "",           "format": "uint32",           "in": "path",           "name": "min",           "required": true,           "type": "integer"         },           {             "description": "",             "format": "uint32",             "in": "path",             "name": "max",             "required": true,             "type": "integer"           },           {             "description": "",             "format": "uint32",             "in": "path",             "name": "size",             "required": true,             "type": "integer"           }],         "responses": {           "200": {             "description": "OK",             "schema": {               "format": "json",               "type": "string"             }           },           "400": {             "description": "Bad Request",             "schema": {               "type": "string"             }           },           "500": {             "description": "Internal Server Error",             "schema": {               "properties": {                 "code": {                   "description": "code",                   "format": "int32",                   "type": "integer"                 },                 "guid": {                   "description": "guid",                   "type": "string"                 },                 "message": {                   "description": "message",                   "type": "string"                 },                 "source": {                   "description": "source",                   "type": "string"                 },                 "type": {                   "description": "type",                   "type": "string"                 }               },               "required": ["code",                 "message",                 "guid",                 "source"],               "type": "object"             }           }         },         "summary": "Get unique random numbers in a range",         "tags": ["rng"]       }     },     "/api/v1.0/random": {       "post": {         "description": "\\nEach request consists of an array of mapper or group objects.\\n\\n**group object**\\n\\nEach group definition will result in a set of random numbers in the response.\\n\\nFor each group with size s,\\n\\n**s** random numbers will be produced in range [**min**, **max**]\\nwhere min and max are the relative properties of the group.\\nAdditionally random numbers can be unique or not by setting the *unique* propery of the group object to true or false.\\nAlso a set of numbers can be excluded from the result by setting the field *exclusion* appropriately.\\n\\n\\ne.g.\\n\\n```javascript\\n\\"group\\": {\\n\\"min\\": 0,\\n\\"max\\": 1000,\\n\\"size\\": 10,\\nunique: true,\\n\\"exclusion\\": [5, 6]\\n}\\n```\\nfor the group above: 10 unique random number will be produced in the range [0,1000] but no number will be equal to 5 or 6\\n\\n\\n**more groups in the same request**\\n\\nIn a single request more than one group can be specified\\n\\n*e.g.*\\n\\n```javascript\\n[\\n{\\n\\"group\\": {\\n\\"max\\": 10,\\n\\"min\\": 1,\\n\\"size\\": 2,\\n\\"unique\\": true\\n}\\n},\\n\\n\\n{\\n\\"group\\": {\\n\\"max\\": 11,\\n\\"min\\": 0,\\n\\"size\\": 2,\\n\\"unique\\": false\\n}\\n}\\n]\\n```\\n\\nOn each group its possible for certain properties to reference the random numbers produced for the previous groups.\\nThose properties are:\\n\\n* minRef\\n* maxRef\\n* exclusionRef\\n\\nSo for a request like the following:\\n\\n```javascript\\n[\\n{\\n\\"group\\": {\\n\\"max\\": 20,\\n\\"min\\": 1,\\n\\"size\\": 1,\\n\\"unique\\": true\\n}\\n},\\n\\n{\\n\\"group\\": {\\n\\"max\\": 120,\\n\\"min\\": 100,\\n\\"size\\": 1,\\n\\"unique\\": true\\n}\\n},\\n\\n{\\n\\"group\\": {\\n\\"maxRef\\": 1,\\n\\"minRef\\": 0,\\n\\"size\\": 10,\\n\\"exlusionRef\\" : [0,1],\\n\\"unique\\": false\\n}\\n}\\n]\\n```\\n\\n\\nFrom the first group a number ***f*** in [1,20] will be produced.\\nFrom the second group a number ***s*** in [100,120] will be produced\\nFrom the third group a number in (***f***,***s***) will be produced\\n\\nThis is because, for the third group *minRef* proeprty is set equal to 0, which means that the minimum value of the range will be set equal to the first random number that will be generated (related to the first group). Also the *maxRef* property is set to 1, which means that the maximum value of the range for the third group, will be set equal to the second random number that will be generated (related to the second group). Finally because the *exclusionRef* property has been set, the first two random numbers will not appear as the outcome of the third group.\\n\\n\\n\\n\\n**mapper object**\\n\\nOn each request one or more mapper objects might appear.\\n\\n*e.g.*\\n\\n```javascript\\n[\\n{\\n\\"group\\": {\\n\\"max\\": 10,\\n\\"min\\": 9,\\n\\"size\\": 1,\\n\\"unique\\": true\\n}\\n},\\n{\\n\\"group\\": {\\n\\"max\\": 11,\\n\\"exclusionRef\\":[0],\\n\\"min\\": 0,\\n\\"size\\": 20,\\n\\"unique\\": false\\n}\\n},\\n{\\n\\"mapper\\": {\\n\\"map\\": [1,10,100,1000],\\n\\"stops\\" : [1,40,60,76,80],\\n\\"size\\": 20\\n}\\n}\\n]\\n```\\nA *mapper* object  uses the *stops* field to form sub-ranges,and defining a maping:\\n\\n\\n* [1,40]   maps to 1\\n* [41,60]  maps to 10\\n* [61,76]  maps to 100\\n* [77,80]  maps to 1000\\n\\n\\nHint: All the numbers in stops array must be sorted\\n\\nThe first number in stops field is rendered as the minimum and the last number of stops is rendered as the maximum value of the sum of the above sub-ranges. In our example the whole range will be [1,80].\\n\\nThe RNG engine will select 20 (because of the size field) numbers in the range [1,80]. For each random number:\\nIf the random number belongs to the first sub-range the first number in the map will be returned.\\nIf the random number belongs to the second sub-range the second number in the map will be returned.\\n\\nIf the random number belongs to the nth sub-range the nth number in the map will be returned.\\n",         "operationId": "post_/api/v1.0/random",         "parameters": [{           "description": "",           "in": "body",           "name": "body",           "required": true,           "schema": {             "items": {               "properties": {                 "group": {                   "description": "group",                   "properties": {                     "exclusion": {                       "description": "exclusion",                       "items": {                         "format": "uint32",                         "type": "integer"                       },                       "type": "array"                     },                     "exclusionRef": {                       "description": "exclusionRef",                       "items": {                         "format": "uint32",                         "type": "integer"                       },                       "type": "array"                     },                     "max": {                       "description": "max",                       "format": "uint32",                       "type": "integer"                     },                     "maxRef": {                       "description": "maxRef",                       "format": "uint16",                       "type": "integer"                     },                     "min": {                       "description": "Test",                       "format": "uint32",                       "type": "integer"                     },                     "minRef": {                       "description": "minRef",                       "format": "uint16",                       "type": "integer"                     },                     "size": {                       "description": "size",                       "format": "uint32",                       "type": "integer"                     },                     "unique": {                       "description": "unique",                       "type": "boolean"                     }                   },                   "required": ["size",                     "unique"],                   "type": "object"                 },                 "mapper": {                   "description": "mapper",                   "properties": {                     "map": {                       "description": "map",                       "items": {                         "format": "uint32",                         "type": "integer"                       },                       "type": "array"                     },                     "size": {                       "description": "size",                       "format": "uint32",                       "type": "integer"                     },                     "stops": {                       "description": "stops",                       "items": {                         "format": "uint32",                         "type": "integer"                       },                       "type": "array"                     }                   },                   "required": ["size",                     "stops",                     "map"],                   "type": "object"                 }               },               "type": "object"             },             "type": "array"           }         }],         "responses": {           "200": {             "description": "OK",             "schema": {               "format": "json",               "type": "string"             }           },           "400": {             "description": "Bad Request",             "schema": {               "type": "string"             }           },           "500": {             "description": "Internal Server Error",             "schema": {               "properties": {                 "code": {                   "description": "code",                   "format": "int32",                   "type": "integer"                 },                 "guid": {                   "description": "guid",                   "type": "string"                 },                 "message": {                   "description": "message",                   "type": "string"                 },                 "source": {                   "description": "source",                   "type": "string"                 },                 "type": {                   "description": "type",                   "type": "string"                 }               },               "required": ["code",                 "message",                 "guid",                 "source"],               "type": "object"             }           }         },         "summary": "Generic random number geneartion",         "tags": ["rng"]       }     },     "/api/v1.0/uuid": {       "get": {         "description": "",         "operationId": "get_/api/v1.0/uuid",         "responses": {           "200": {             "description": "OK",             "schema": {               "type": "string"             }           },           "400": {             "description": "Bad Request",             "schema": {               "type": "string"             }           }         },         "summary": "Generates a uuid",         "tags": ["uuid"]       }     },     "/api/v1.0/uuid/{uuid}/validation": {       "get": {         "description": "",         "operationId": "get_/api/v1.0/uuid/<>/validation",         "parameters": [{           "description": "",           "in": "path",           "name": "uuid",           "required": true,           "type": "string"         }],         "responses": {           "200": {             "description": "OK"           },           "400": {             "description": "Bad Request",             "schema": {               "type": "string"             }           },           "404": {             "description": "Not Found"           }         },         "summary": "Validates a uuid",         "tags": ["uuid"]       }     },     "/api/v1.0/version": {       "get": {         "description": "",         "operationId": "get_/api/v1.0/version",         "responses": {           "200": {             "description": "OK",             "schema": {               "type": "string"             }           },           "400": {             "description": "Bad Request",             "schema": {               "type": "string"             }           },           "404": {             "description": "Not Found",             "schema": {               "type": "string"             }           }         },         "summary": "Get binary version"       }     },     "/gtg": {       "get": {         "description": "",         "operationId": "get_/gtg",         "responses": {           "200": {             "description": "OK",             "schema": {               "type": "string"             }           },           "400": {             "description": "Bad Request",             "schema": {               "type": "string"             }           }         },         "summary": ""       }     },     "/swagger": {       "get": {         "description": "",         "operationId": "get_/swagger",         "responses": {           "200": {             "description": "OK",             "schema": {               "format": "json",               "type": "string"             }           },           "400": {             "description": "Bad Request",             "schema": {               "type": "string"             }           }         },         "summary": ""       }     }   },   "produces": ["application/json"],   "schemes": ["http"],   "swagger": "2.0",   "tags": [] }', 'rng', '', 'v1.0');
